#!/usr/bin/env python3
"""Configure dotfiles."""

import argparse
import configparser
import pathlib
import shutil
import subprocess
import sys

RED = "\033[1;31m"
GREEN = "\033[1;32m"
NOCOLOR = "\033[0m"
TICK = f"{GREEN}\u2713{NOCOLOR}"
CROSS = f"{RED}\u2718{NOCOLOR}"

CONFIG = pathlib.Path(__file__).parent.parent / "config"

if sys.platform == "darwin":
    CODE_DIR = "~/Library/Application Support"
elif sys.platform == "linux":
    CODE_DIR = "~/.config"

APPS = {
    "bash": [("aliases", "~/.aliases"), ("bashrc", "~/.bashrc")],
    "code": [("settings.json", f"{CODE_DIR}/Code/User/settings.json")],
    "fish": [("config.fish", "~/.config/fish/config.fish")],
    "git": [("gitconfig", "~/.gitconfig"), ("gitignore", "~/.gitignore")],
    "neovim": [("vimrc", "~/.config/nvim/init.vim")],
    "starship": [("starship.toml", "~/.config/starship.toml")],
    "tmux": [("tmux.conf", "~/.tmux.conf")],
    "vim": [("vimrc", "~/.vimrc")],
    "xonsh": [("xonshrc", "~/.xonshrc")],
    "zsh": [("aliases", "~/.aliases"), ("zshrc", "~/.zshrc")],
}

ENV_REQUIRED = ["git"]


def _git(conf):
    try:
        email = conf["email"]
    except Exception:
        raise Exception("config missing required field 'email'")
    subprocess.run(["git", "config", "--global", "user.email", email])


def get_config(envfile):
    config = configparser.ConfigParser()
    config.read(envfile)
    return config._sections


def copy_dotfile(src, dst, backup):
    src = CONFIG / src
    dst = pathlib.Path(dst).expanduser()
    if not dst.parent.exists():
        dst.mkdir(parents=True)
    if backup and dst.exists():
        shutil.copy(dst, dst.parent / (dst.name + ".bak"))
    shutil.copy(src, dst)


def extra_config(name, config_dict):
    if name == "git":
        _git(config_dict.get(name))


def setup_app(name, files, copy_only, config_dict, backup):
    ldots = 30 - len(name)
    print(f"Configuring {name} {ldots * '.'} ", end="")
    try:
        for file in files:
            src, dst = file
            copy_dotfile(src=src, dst=dst, backup=backup)
        if not copy_only:
            extra_config(name=name, config_dict=config_dict)
    except Exception as e:
        print(CROSS)
        return e
    else:
        print(TICK)


def parse_args():
    parser = argparse.ArgumentParser(description="Configure dotfiles.")
    parser.add_argument(
        "apps",
        type=str,
        nargs="*",
        help="select particular apps to configure",
    )
    parser.add_argument(
        "-a",
        "--all",
        action="store_true",
        help="configure all apps",
    )
    parser.add_argument(
        "-b",
        "--backup",
        action="store_true",
        help="backup existing dotfiles",
    )
    parser.add_argument(
        "-c",
        "--copy-only",
        action="store_true",
        help="only copy dotfiles, no extra config",
    )
    parser.add_argument(
        "-e",
        "--env",
        type=pathlib.Path,
        help="path to env file [default: .env]",
        default=pathlib.Path(".env"),
    )
    args = parser.parse_args()
    if args.all:
        apps = list(APPS.keys())
    else:
        apps = args.apps
    return apps, args.copy_only, args.env, args.backup


def main():
    apps, copy_only, envfile, backup = parse_args()
    if apps == []:
        print("No apps selected for configuration")
    config_dict = get_config(envfile=envfile)
    errors = {}
    for app, files in APPS.items():
        if app in apps:
            error = setup_app(
                name=app,
                files=files,
                copy_only=copy_only,
                config_dict=config_dict,
                backup=backup,
            )
            if error:
                errors[app] = error
    if errors:
        print("")
        if envfile.exists():
            print(f"[INFO] envfile '{envfile}'")
        else:
            print(f"[ERROR] envfile '{envfile}' does not exist")
        for app, error in errors.items():
            if error:
                print(f"[ERROR] {app} - {error}")
        sys.exit(1)


if __name__ == "__main__":
    main()
