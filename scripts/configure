#!/usr/bin/env python3
"""Configure dotfiles."""

import argparse
import pathlib
import shutil
import subprocess
import sys

RED = "\033[1;31m"
GREEN = "\033[1;32m"
NOCOLOR = "\033[0m"
TICK = f"{GREEN}\xE2\x9C\x94{NOCOLOR}"
CROSS = f"{RED}\xE2\x9C\x97{NOCOLOR}"

CONFIG = pathlib.Path(__file__).parent.parent / "config"

if sys.platform == "darwin":
    CODE_DIR = "~/Library/Application Support"
elif sys.platform == "linux":
    CODE_DIR = "~/.config"

APPS = {
    "bash": [("aliases", "~/.aliases"), ("bashrc", "~/.bashrc")],
    "code": [("settings.json", f"{CODE_DIR}/Code/User/settings.json")],
    "fish": [("config.fish", "~/.config/fish/config.fish")],
    "git": [("gitconfig", "~/.gitconfig"), ("gitignore", "~/.gitignore")],
    "neovim": [("vimrc", "~/.config/nvim/init.vim")],
    "starship": [("starship.toml", "~/.config/starship.toml")],
    "tmux": [("tmux.conf", "~/.tmux.conf")],
    "vim": [("vimrc", "~/.vimrc")],
    "xonsh": [("xonshrc", "~/.xonshrc")],
    "zsh": [("aliases", "~/.aliases"), ("zshrc", "~/.zshrc")],
}


def copy_dotfile(src, dst, backup):
    src = CONFIG / src
    dst = pathlib.Path(dst).expanduser()
    if not dst.parent.exists():
        dst.mkdir(parents=True)
    if backup and dst.exists():
        shutil.copy(dst, dst.parent / (dst.name + ".bak"))
    shutil.copy(src, dst)


def extra_config(name):
    if name == "vim":
        pathlib.Path("~/.vim/swp").expanduser().mkdir(parents=True, exist_ok=True)
        pathlib.Path("~/.vim/undo").expanduser().mkdir(parents=True, exist_ok=True)
        subprocess.run(["vim", "+PlugInstall", "+qall"])
    elif name == "neovim":
        subprocess.run(["nvim", "+PlugInstall", "+qall"])


def setup_app(name, files, extra, backup):
    ldots = 30 - len(name)
    print(f"Configuring {name} {ldots * '.'} ", end="")
    try:
        for file in files:
            src, dst = file
            copy_dotfile(src=src, dst=dst, backup=backup)
        if extra:
            extra_config(name=name)
    except:
        print("failure!")
    else:
        print("success!")


def parse_args():
    parser = argparse.ArgumentParser(description="Configure dotfiles.")
    parser.add_argument(
        "apps",
        type=str,
        nargs="*",
        help="select particular apps to configure",
    )
    parser.add_argument(
        "-a",
        "--all",
        action="store_true",
        help="configure all apps",
    )
    parser.add_argument(
        "-b",
        "--backup",
        action="store_true",
        help="backup existing dotfiles",
    )
    parser.add_argument(
        "-e",
        "--extra",
        action="store_true",
        help="do extra configuration",
    )
    args = parser.parse_args()
    if args.all:
        apps = list(APPS.keys())
    else:
        apps = args.apps
    return apps, args.extra, args.backup


def main():
    apps, extra, backup = parse_args()
    for app, files in APPS.items():
        if app in apps:
            setup_app(name=app, files=files, extra=extra, backup=backup)


if __name__ == "__main__":
    main()
