#!/usr/bin/env python3
"""Install software."""

import pathlib
import subprocess
import sys

INSTALL = pathlib.Path(__file__).parent.parent / "install"


def is_linux_distro(distro):
    try:
        output = subprocess.run(["lsb_release", "-is"], capture_output=True)
    except FileNotFoundError:
        return False
    if output.stdout.decode().lower() == distro.lower():
        return True
    return False


def set_mac_defaults():
    subprocess.run(["bash", INSTALL / "mac.sh"])


def install_homebrew():
    subprocess.run(
        [
            "/usr/bin/ruby",
            "-e",
            "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)",
        ]
    )
    subprocess.run(["brew", "update"])
    subprocess.run(["brew", "doctor"])


def install_with_brew():

    try:
        subprocess.run(["brew", "bundle", "--file", INSTALL / "Brewfile"])
    except FileNotFoundError:
        install_homebrew()
        subprocess.run(["brew", "bundle", "--file", INSTALL / "Brewfile"])


def install_code_extensions():
    pass


# install_code_extensions () {
#   if command -v code > /dev/null; then
#     printf -- '\n--- installing code extensions\n'
#     exts=$(<install/extensions.txt)
#     for ext in "${exts[@]}"; do
#       code --install-extension "$ext"
#     done
#   else
#     printf -- '\n--- code not available\n'
#     printf -- '    Install from https://code.visualstudio.com/Download\n'
#     printf -- '    Then from the command palette run "Shell Command: Install code command in PATH"'
#   fi
# }


def install_with_apt():
    pass


# install_with_apt () {
#   printf -- '\n--- installing applications with apt\n'
#   readarary pkgs < install/pkglist.txt
#   for pkg in "${pkgs[@]}"; do
#     sudo apt install -y "$pkg"
#   done
# }


def install_with_dnf():
    pass


# install_with_dnf () {
#   if command -v dnf > /dev/null; then
#     printf -- '\n--- installing applications with dnf\n'
#     readarary pkgs < install/pkglist.txt
#     for pkg in "${pkgs[@]}"; do
#       sudo dnf install -y "$pkg"
#     done
#   else
#     printf -- '\n--- dnf not available\n'
#   fi
# }


def install_fzf():
    pass


# install_fzf () {
#   if command -v fzf > /dev/null; then
#     printf -- '\n--- fzf already installed... skipping\n'
#     return
#   else
#     printf -- '\n--- installing fzf\n'
#     git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf \
#       && ~/.fzf/install
#   fi
# }


def install_starship():
    try:
        subprocess.run(["starship"], capture_output=True)
    except FileNotFoundError:
        bin = pathlib.Path("~/bin").expanduser()
        if not bin.exists():
            bin.mkdir()
        TMPFILE = pathlib.Path("tmp.sh")
        with open(TMPFILE, "w") as fp:
            subprocess.run(
                ["curl", "-fsSL", "https://starship.rs/install.sh"], stdout=fp
            )
        subprocess.run(["chmod", "+x", TMPFILE])
        subprocess.run(["bash", TMPFILE, "--yes", f"--bin-dir={bin}"])
        TMPFILE.unlink()


def install_vim_plug():
    subprocess.run(
        [
            "curl",
            "-fLo",
            "~/.vim/autoload/plug.vim",
            "--create-dirs",
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
        ]
    )
    subprocess.run(
        [
            "sh",
            "-c",
            "'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim"
            " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'",
        ]
    )


def main():
    if sys.platform == "darwin":
        set_mac_defaults()
        install_with_brew()
        install_code_extensions()
    elif sys.platform == "linux":
        if is_linux_distro("Ubuntu"):
            install_with_apt()
        if is_linux_distro("Fedora"):
            install_with_dnf()
    else:
        raise RuntimeError("unsupported platform")
    install_fzf()
    install_starship()
    install_vim_plug()


if __name__ == "__main__":
    main()
