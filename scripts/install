#!/usr/bin/env python3
"""Install software."""

from pathlib import Path
from subprocess import CalledProcessError, run
from sys import platform

# TODO: add argparse and options for installing.
# TODO: is it possible to write tests for this?

BOLD = "\033[1m"
RESET = "\033[0m"
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
GREY = "\033[1;90m"

TICK = f"{GREEN}\u2713{RESET}"
CROSS = f"{RED}\u2718{RESET}"
ARROW = f"{YELLOW}\u27BE{RESET}"

INSTALL_DIR = Path(__file__).parent.parent / "install"


# ------------------------------------------------------------------------------------ #
# Utility


def printer(msg, status):
    print(f"{status}  {BOLD}{GREY}{msg}{RESET}")


def read_lines(file):
    with open(file, "r") as fp:
        return [line.strip() for line in fp.readlines()]


def is_linux_distro(distro):
    try:
        output = run(["lsb_release", "-is"], capture_output=True)
    except FileNotFoundError:
        return False
    if output.stdout.decode().lower() == distro.lower():
        return True
    return False


def is_installed(app):
    if run(["command", "-v", app], capture_output=True).returncode == 0:
        return True
    return False


def get_system():
    if platform == "darwin":
        return "macos"
    elif platform == "linux":
        if is_linux_distro("Ubuntu"):
            return "ubuntu"
        if is_linux_distro("Fedora"):
            return "fedora"
    else:
        raise RuntimeError("unsupported platform")


# ------------------------------------------------------------------------------------ #
# Install with


def install_with_apt():
    pkgs = read_lines(INSTALL_DIR / "pkglist.txt")
    for pkg in pkgs:
        run(["sudo", "apt", "install", "-y", pkg], check=True)


def install_with_brew():
    run(["brew", "bundle", "--file", INSTALL_DIR / "Brewfile"], check=True)


def install_with_code():
    exts = read_lines(INSTALL_DIR / "extensions.txt")
    for ext in exts:
        run(["code", "--install-extension", ext], check=True)


def install_with_dnf():
    pkgs = read_lines(INSTALL_DIR / "pkglist.txt")
    for pkg in pkgs:
        run(["sudo", "dnf", "install", "-y", pkg], check=True)


def install_with_nvim():
    path = Path("~/.local/share/nvim/site/autoload/plug.vim").expanduser()
    run(
        [
            "sh",
            "-c",
            f"curl -fLo {path} "
            "--create-dirs "
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
        ],
        check=True,
    )


def install_with_vim():
    Path("~/.vim/swp").expanduser().mkdir(parents=True, exist_ok=True)
    Path("~/.vim/undo").expanduser().mkdir(parents=True, exist_ok=True)
    path = Path("~/.vim/autoload/plug.vim").expanduser()
    run(
        [
            "curl",
            "-fLo",
            path,
            "--create-dirs",
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
        ],
        check=True,
    )


# ------------------------------------------------------------------------------------ #
# Install app


def install_brew():
    run(
        [
            "/usr/bin/ruby",
            "-e",
            "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)",
        ],
        check=True,
    )
    run(["brew", "update"], check=True)
    run(["brew", "doctor"], check=True)


def install_fzf():
    path = Path("~/.fzf").expanduser()
    run(
        [
            "git",
            "clone",
            "--depth",
            "1",
            "https://github.com/junegunn/fzf.git",
            path,
        ],
        check=True,
    )
    run([path / "install"], check=True)


def install_starship():
    path = Path("~/bin").expanduser()
    if not path.exists():
        path.mkdir()
    TMPFILE = Path("tmp.sh")
    with open(TMPFILE, "w") as fp:
        run(["curl", "-fsSL", "https://starship.rs/install.sh"], stdout=fp, check=True)
    run(["chmod", "+x", TMPFILE], check=True)
    run(["bash", TMPFILE, "--yes", f"--bin-dir={path}"], check=True)
    TMPFILE.unlink()


# ------------------------------------------------------------------------------------ #

SYSTEM = get_system()

APPS = dict(
    macos=["brew", "fzf", "starship"],
    fedora=["fzf", "starship"],
    ubuntu=["fzf", "starship"],
)

INSTALLERS = dict(
    macos=["brew", "code", "nvim", "vim"],
    fedora=["code", "dnf", "nvim", "vim"],
    ubuntu=["apt", "code", "nvim", "vim"],
)

INSTALL_APP = dict(
    brew=install_brew,
    fzf=install_fzf,
    starship=install_starship,
)

INSTALL_WITH = dict(
    apt=install_with_apt,
    brew=install_with_brew,
    code=install_with_code,
    dnf=install_with_dnf,
    nvim=install_with_nvim,
    vim=install_with_vim,
)

# ------------------------------------------------------------------------------------ #


def install_app(app):
    INSTALL_APP[app]()


def install_with(installer):
    INSTALL_WITH[installer]()


def main():
    apps = APPS[SYSTEM]
    installers = INSTALLERS[SYSTEM]

    for app in apps:
        if not is_installed(app):
            printer(msg=f"installing {app}", status=ARROW)
            try:
                install_app(app)
            except CalledProcessError:
                printer(msg=f"failed to install {app}", status=CROSS)
            else:
                printer(msg=f"installed {app}", status=TICK)
        else:
            printer(msg=f"{app} already installed", status=TICK)

    for installer in installers:
        if is_installed(installer):
            printer(msg=f"installing with {installer}", status=ARROW)
            install_with(installer)
            printer(msg=f"installed with {installer}", status=TICK)
        else:
            printer(msg=f"{installer} not available, skipping", status=CROSS)


if __name__ == "__main__":
    main()
