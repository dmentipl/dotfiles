#!/usr/bin/env python3
"""Install software."""

import pathlib
import subprocess
import sys

# TODO: add argparse and options for installing.
# TODO: is it possible to write tests for this?

INSTALL = pathlib.Path(__file__).parent.parent / "install"


def is_linux_distro(distro):
    try:
        output = subprocess.run(["lsb_release", "-is"], capture_output=True)
    except FileNotFoundError:
        return False
    if output.stdout.decode().lower() == distro.lower():
        return True
    return False


def set_mac_defaults():
    subprocess.run(["bash", INSTALL / "mac.sh"])


def install_homebrew():
    subprocess.run(
        [
            "/usr/bin/ruby",
            "-e",
            "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)",
        ]
    )
    subprocess.run(["brew", "update"])
    subprocess.run(["brew", "doctor"])


def install_with_brew():
    try:
        subprocess.run(["brew", "bundle", "--file", INSTALL / "Brewfile"])
    except FileNotFoundError:
        install_homebrew()
        subprocess.run(["brew", "bundle", "--file", INSTALL / "Brewfile"])


def install_code_extensions():
    with open(INSTALL / "extensions.txt", "r") as fp:
        exts = [line.strip() for line in fp.readlines()]
    for ext in exts:
        subprocess.run(["code", "--install-extension", ext])


def install_with_apt():
    with open(INSTALL / "pkglist.txt", "r") as fp:
        pkgs = [line.strip() for line in fp.readlines()]
    for pkg in pkgs:
        subprocess.run(["sudo", "apt", "install", "-y", pkg])


def install_with_dnf():
    with open(INSTALL / "pkglist.txt", "r") as fp:
        pkgs = [line.strip() for line in fp.readlines()]
    for pkg in pkgs:
        subprocess.run(["sudo", "dnf", "install", "-y", pkg])


def install_fzf():
    fzf_dir = pathlib.Path("~/.fzf").expanduser()
    try:
        subprocess.run(["fzf", "--version"], capture_output=True)
    except FileNotFoundError:
        subprocess.run(
            [
                "git",
                "clone",
                "--depth",
                "1",
                "https://github.com/junegunn/fzf.git",
                fzf_dir,
            ]
        )
        subprocess.run([fzf_dir / "install"])


def install_starship():
    try:
        subprocess.run(["starship"], capture_output=True)
    except FileNotFoundError:
        bin_dir = pathlib.Path("~/bin").expanduser()
        if not bin_dir.exists():
            bin_dir.mkdir()
        TMPFILE = pathlib.Path("tmp.sh")
        with open(TMPFILE, "w") as fp:
            subprocess.run(
                ["curl", "-fsSL", "https://starship.rs/install.sh"], stdout=fp
            )
        subprocess.run(["chmod", "+x", TMPFILE])
        subprocess.run(["bash", TMPFILE, "--yes", f"--bin-dir={bin_dir}"])
        TMPFILE.unlink()


def install_vim_plug():
    subprocess.run(
        [
            "curl",
            "-fLo",
            "~/.vim/autoload/plug.vim",
            "--create-dirs",
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
        ]
    )
    subprocess.run(
        [
            "sh",
            "-c",
            "'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim"
            " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'",
        ]
    )


def main():
    if sys.platform == "darwin":
        set_mac_defaults()
        install_with_brew()
        install_code_extensions()
    elif sys.platform == "linux":
        if is_linux_distro("Ubuntu"):
            install_with_apt()
        if is_linux_distro("Fedora"):
            install_with_dnf()
    else:
        raise RuntimeError("unsupported platform")
    install_fzf()
    install_starship()
    install_vim_plug()


if __name__ == "__main__":
    main()
