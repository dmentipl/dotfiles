#!/usr/bin/env python3
"""Install software."""

import subprocess
import sys
from pathlib import Path

# TODO: add argparse and options for installing.
# TODO: is it possible to write tests for this?

INSTALL = Path(__file__).parent.parent / "install"


def is_linux_distro(distro):
    try:
        output = subprocess.run(["lsb_release", "-is"], capture_output=True)
    except FileNotFoundError:
        return False
    if output.stdout.decode().lower() == distro.lower():
        return True
    return False


def is_installed(app):
    proc = subprocess.run(["command", "-v", app], capture_output=True)
    if proc.returncode == 0:
        return True
    return False


def set_mac_defaults():
    subprocess.run(["bash", INSTALL / "mac.sh"])


def install_homebrew():
    subprocess.run(
        [
            "/usr/bin/ruby",
            "-e",
            "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)",
        ]
    )
    subprocess.run(["brew", "update"])
    subprocess.run(["brew", "doctor"])


def install_with_brew():
    subprocess.run(["brew", "bundle", "--file", INSTALL / "Brewfile"])


def install_with_apt():
    with open(INSTALL / "pkglist.txt", "r") as fp:
        pkgs = [line.strip() for line in fp.readlines()]
    for pkg in pkgs:
        subprocess.run(["sudo", "apt", "install", "-y", pkg])


def install_with_dnf():
    with open(INSTALL / "pkglist.txt", "r") as fp:
        pkgs = [line.strip() for line in fp.readlines()]
    for pkg in pkgs:
        subprocess.run(["sudo", "dnf", "install", "-y", pkg])


def install_with_code():
    with open(INSTALL / "extensions.txt", "r") as fp:
        exts = [line.strip() for line in fp.readlines()]
    for ext in exts:
        subprocess.run(["code", "--install-extension", ext])


def install_fzf():
    path = Path("~/.fzf").expanduser()
    subprocess.run(
        [
            "git",
            "clone",
            "--depth",
            "1",
            "https://github.com/junegunn/fzf.git",
            path,
        ]
    )
    subprocess.run([path / "install"])


def install_starship():
    path = Path("~/bin").expanduser()
    if not path.exists():
        path.mkdir()
    TMPFILE = Path("tmp.sh")
    with open(TMPFILE, "w") as fp:
        subprocess.run(["curl", "-fsSL", "https://starship.rs/install.sh"], stdout=fp)
    subprocess.run(["chmod", "+x", TMPFILE])
    subprocess.run(["bash", TMPFILE, "--yes", f"--bin-dir={path}"])
    TMPFILE.unlink()


def install_vim_plug_vim():
    path = Path("~/.vim/autoload/plug.vim").expanduser()
    subprocess.run(
        [
            "curl",
            "-fLo",
            path,
            "--create-dirs",
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
        ]
    )


def install_vim_plug_nvim():
    path = Path("~/.local/share/nvim/site/autoload/plug.vim").expanduser()
    subprocess.run(
        [
            "sh",
            "-c",
            f"'curl -fLo {path} "
            "--create-dirs "
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'",
        ]
    )


def main():
    if sys.platform == "darwin":
        set_mac_defaults()
        if not is_installed("brew"):
            install_homebrew()
        install_with_brew()
    elif sys.platform == "linux":
        if is_linux_distro("Ubuntu"):
            install_with_apt()
        if is_linux_distro("Fedora"):
            install_with_dnf()
    else:
        raise RuntimeError("unsupported platform")

    if is_installed("code"):
        install_with_code()
    if not is_installed("fzf"):
        install_fzf()
    if not is_installed("starship"):
        install_starship()
    if is_installed("vim"):
        install_vim_plug_vim()
    if is_installed("nvim"):
        install_vim_plug_nvim()


if __name__ == "__main__":
    main()
